"use client";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import { OrbitControls, Environment, useGLTF, useTexture } from "@react-three/drei";
import { useState, useRef, useEffect, useCallback } from "react";
import * as THREE from "three";
import RadialMenu from "./RadialMenu";

// âœ… Preload assets
useGLTF.preload("/models/heel.glb");
useGLTF.preload("/models/sole.glb");
useGLTF.preload("/models/vamp_interior.glb");
useGLTF.preload("/models/laces.glb");
useGLTF.preload("/models/quarter.glb");
useGLTF.preload("/models/toe_vamp.glb");
useGLTF.preload("/models/heel_counter.glb");
useGLTF.preload("/models/stitches.glb");

// âœ… Hierarchical Material Options
const materialOptions = [
Â  {
Â  Â  label: "Italian Calf Leather",
Â  Â  type: "Italian Calf Leather",
Â  Â  colors: [
Â  Â  Â  { url: "/swatches/calf/2.jpg", label: "Navy Blue" },
Â  Â  Â  { url: "/swatches/calf/3.jpg", label: "Classic Brown" },
Â  Â  Â  { url: "/swatches/calf/4.jpg", label: "Pure White" },
Â  Â  Â  { url: "/swatches/calf/5.jpg", label: "Chocolate Suede" },
Â  Â  Â  { url: "/swatches/calf/6.jpg", label: "Tan Suede" },
Â  Â  ],
Â  },
Â  {
Â  Â  label: "Italian Calf Leather - Shine",
Â  Â  type: "Italian Calf Leather - Shine",
Â  Â  colors: [
Â  Â  Â  { url: "/swatches/calf/black.jpg", label: "Jet Black" },
Â  Â  Â  { url: "/swatches/calf-shine/black.jpg", label: "Navy Blue" },
Â  Â  Â  { url: "/swatches/calf-shine/brown.jpg", label: "Classic Brown" },
Â  Â  Â  { url: "/swatches/calf-shine/chocolate.jpg", label: "Pure White" },
Â  Â  Â  { url: "/swatches/calf-shine/dark-brown.jpg", label: "Chocolate Suede" },
Â  Â  Â  { url: "/swatches/calf-shine/dark-gray.jpg", label: "Tan Suede" },
Â  Â  Â  { url: "/swatches/calf-shine/dark-red.jpg", label: "Burgundy Suede" },
Â  Â  Â  { url: "/swatches/calf-shine/white.jpg", label: "Burgundy Suede" },
Â  Â  ],
Â  },
Â  {
Â  Â  label: "Flora Leather",
Â  Â  type: "Flora Leather",
Â  Â  colors: [
Â  Â  Â  { url: "/swatches/flora/black.jpg", label: "Patent Black" },
Â  Â  Â  { url: "/swatches/flora/brown.jpg", label: "Glossy Red" },
Â  Â  Â  { url: "/swatches/flora/chocolate.jpg", label: "Patent White" },
Â  Â  Â  { url: "/swatches/flora/cream.jpg", label: "Patent White" },
Â  Â  Â  { url: "/swatches/flora/dark-brown.jpg", label: "Patent White" },
Â  Â  ],
Â  },
Â  {
Â  Â  label: "Suede",
Â  Â  type: "Suede",
Â  Â  colors: [
Â  Â  Â  { url: "/swatches/suede/black.jpg", label: "Patent Black" },
Â  Â  Â  { url: "/swatches/suede/brown.jpg", label: "Glossy Red" },
Â  Â  Â  { url: "/swatches/suede/chocolate.jpg", label: "Patent White" },
Â  Â  Â  { url: "/swatches/suede/cream.jpg", label: "Patent White" },
Â  Â  Â  { url: "/swatches/suede/dark-brown.jpg", label: "Patent White" },
Â  Â  Â  { url: "/swatches/suede/dark-red.jpg", label: "Patent White" },
Â  Â  ],
Â  },
Â  {
Â  Â  label: "Waxed Leather",
Â  Â  type: "Waxed Leather",
Â  Â  colors: [
Â  Â  Â  { url: "/swatches/waxed/black.jpg", label: "Patent Black" },
Â  Â  Â  { url: "/swatches/waxed/dark-brown.jpg", label: "Patent White" },
Â  Â  Â  { url: "/swatches/waxed/slatte.jpg", label: "Patent White" },
Â  Â  ],
Â  },
];

// âœ… Preload textures
const allSwatchUrls = materialOptions.flatMap((mat) => mat.colors.map((color) => color.url));
allSwatchUrls.forEach((url) => useTexture.preload(url));

// ðŸ›‘ NEW: Component to handle R3F hooks that require the Canvas context
function ColorSpaceManager() {
    const { gl } = useThree();
    
    // Set output encoding for the renderer (WebGL) to ensure correct color display
    useEffect(() => {
        gl.outputColorSpace = THREE.SRGBColorSpace;
    }, [gl]);

    return null; // This component doesn't render anything visible
}

// âœ… Auto rotation
function CameraController() {
Â  const rotationGroupRef = useRef();
Â  useFrame(() => {
Â  Â  if (rotationGroupRef.current) rotationGroupRef.current.rotation.y += 0.003;
Â  });
Â  return <group ref={rotationGroupRef} />;
}

// âœ… Shoe part
function ShoePart({ url, name, onPartClick, texture }) {
Â  const { scene } = useGLTF(url);
Â  const hoverGlow = useRef(0);
Â  const meshRefs = useRef([]);
  // Use a temporary path for useTexture if texture is null, or it reloads constantly with 'undefined'
  const texturePath = texture || "/swatches/calf/blue.jpg"; 
Â  const loadedTex = useTexture(texturePath); 

Â  useEffect(() => {
Â  Â  meshRefs.current = [];
    
    // Use SRGBColorSpace instead of the deprecated sRGBEncoding
    if (loadedTex) {
        loadedTex.colorSpace = THREE.SRGBColorSpace; 
    }
    
Â  Â  scene.traverse((child) => {
Â  Â  Â  if (child.isMesh) {
Â  Â  Â  Â  const material = new THREE.MeshStandardMaterial({
Â  Â  Â  Â  Â  map: texture ? loadedTex : null,
          // Correctly set base color to white when texture is present.
Â  Â  Â  Â  Â  color: texture ? new THREE.Color("white") : new THREE.Color("#000000"), 
Â  Â  Â  Â  Â  metalness: 0.01,
Â  Â  Â  Â  Â  roughness: 0.85,
Â  Â  Â  Â  Â  emissive: new THREE.Color("#4c4c4c41"),
Â  Â  Â  Â  Â  emissiveIntensity: 0,
Â  Â  Â  Â  });
        
Â  Â  Â  Â  if (texture) {
            // Apply texture tiling/wrapping to prevent washout
Â  Â  Â  Â  Â  loadedTex.wrapS = THREE.RepeatWrapping;
Â  Â  Â  Â  Â  loadedTex.wrapT = THREE.RepeatWrapping;
            loadedTex.repeat.set(3, 3); // Adjust this value (e.g., 2, 5, 10) to control tiling density
Â  Â  Â  Â  Â  loadedTex.needsUpdate = true;
Â  Â  Â  Â  }
        
Â  Â  Â  Â  child.material.dispose?.();
Â  Â  Â  Â  child.material = material;
Â  Â  Â  Â  meshRefs.current.push(child);
Â  Â  Â  }
Â  Â  });
    
    // Cleanup if texture changes
    return () => {
        if (loadedTex) {
            loadedTex.repeat.set(1, 1);
            loadedTex.needsUpdate = true;
        }
    }
Â  }, [scene, loadedTex, texture]);

Â  useFrame(() => {
Â  Â  meshRefs.current.forEach((mesh) => {
Â  Â  Â  mesh.material.emissiveIntensity = THREE.MathUtils.lerp(
Â  Â  Â  Â  mesh.material.emissiveIntensity,
Â  Â  Â  Â  hoverGlow.current,
Â  Â  Â  Â  0.3
Â  Â  Â  );
Â  Â  });
Â  });

Â  const pointerActive = !!onPartClick;

Â  return (
Â  Â  <primitive
Â  Â  Â  object={scene}
Â  Â  Â  onPointerOver={(e) => {
Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  if (pointerActive) {
Â  Â  Â  Â  Â  document.body.style.cursor = "pointer";
Â  Â  Â  Â  Â  hoverGlow.current = 0.2;
Â  Â  Â  Â  }
Â  Â  Â  }}
Â  Â  Â  onPointerOut={(e) => {
Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  if (pointerActive) {
Â  Â  Â  Â  Â  document.body.style.cursor = "default";
Â  Â  Â  Â  Â  hoverGlow.current = 0;
Â  Â  Â  Â  }
Â  Â  Â  }}
Â  Â  Â  onClick={(e) => {
Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  if (onPartClick) onPartClick(name);
Â  Â  Â  }}
Â  Â  />
Â  );
}

export default function ShoeCustomizer() {
Â  const [selectedPart, setSelectedPart] = useState(null);
Â  const [selectedLeatherType, setSelectedLeatherType] = useState(null);
Â  const [partTextures, setPartTextures] = useState({});
Â  const [isMobile, setIsMobile] = useState(false);
  // ðŸ›‘ REMOVED: const { gl } = useThree(); is moved into ColorSpaceManager

Â  // âœ… Detect screen size
Â  useEffect(() => {
Â  Â  const checkMobile = () => setIsMobile(window.innerWidth <= 768);
Â  Â  checkMobile();
Â  Â  window.addEventListener("resize", checkMobile);
Â  Â  return () => window.removeEventListener("resize", checkMobile);
Â  }, []);
  
  // ðŸ›‘ REMOVED: useEffect for gl.outputColorSpace is moved into ColorSpaceManager

Â  // âœ… Callbacks remain same
Â  const handleSwatchClick = useCallback(
Â  Â  (swatchOption) => {
Â  Â  Â  if (!selectedPart) return;
Â  Â  Â  setPartTextures((prev) => ({
Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  [selectedPart]: swatchOption.url,
Â  Â  Â  }));
Â  Â  Â  setSelectedLeatherType(null);
Â  Â  Â  setSelectedPart(null);
Â  Â  },
Â  Â  [selectedPart]
Â  );

Â  const handleLeatherTypeClick = useCallback((leatherType) => {
Â  Â  setSelectedLeatherType(leatherType);
Â  }, []);

Â  const handleCloseMenu = useCallback(() => {
Â  Â  setSelectedLeatherType(null);
Â  Â  setSelectedPart(null);
Â  }, []);

Â  // âœ… Menu logic stays same
Â  let menuToShow = null;
Â  let menuOptions = [];
Â  let menuTitle = "";
Â  let onSelectAction = () => {};

Â  if (selectedPart && !selectedLeatherType) {
Â  Â  menuToShow = "leather";
Â  Â  menuOptions = materialOptions;
Â  Â  menuTitle = `${selectedPart}`;
Â  Â  onSelectAction = (option) => handleLeatherTypeClick(option.type);
Â  } else if (selectedPart && selectedLeatherType) {
Â  Â  const selectedMaterial = materialOptions.find((mat) => mat.type === selectedLeatherType);
Â  Â  if (selectedMaterial) {
Â  Â  Â  menuToShow = "swatch";
Â  Â  Â  menuOptions = selectedMaterial.colors;
Â  Â  Â  menuTitle = `${selectedMaterial.label} Colors`;
Â  Â  Â  onSelectAction = (option) => handleSwatchClick(option);
Â  Â  }
Â  }

Â  const controlsEnabled = !menuToShow;

Â  return (
Â  Â  <div
Â  Â  Â  style={{
Â  Â  Â  Â  width: "100vw",
Â  Â  Â  Â  height: "100vh",
Â  Â  Â  Â  position: "relative",
Â  Â  Â  Â  overflow: "hidden",
Â  Â  Â  Â  background: "#111",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <Canvas
Â  Â  Â  Â  camera={{
Â  Â  Â  Â  Â  position: isMobile ? [3, 3, 4] : [5, 4, 0],
Â  Â  Â  Â  Â  fov: isMobile ? 7 : 4,
Â  Â  Â  Â  }}
Â  Â  Â  Â  shadows
Â  Â  Â  Â  gl={{ antialias: true, powerPreference: "high-performance" }}
Â  Â  Â  >
        {/* ðŸš€ ADDED: The new component is placed inside the Canvas */}
        <ColorSpaceManager /> 

Â  Â  Â  Â  <ambientLight intensity={1.5} />
Â  Â  Â  Â  <directionalLight position={[15, 5, 5]} intensity={0.5} color={"#ffffff"} />
Â  Â  Â  Â  <spotLight
Â  Â  Â  Â  Â  position={[10, 10, 10]}
Â  Â  Â  Â  Â  angle={0.3}
Â  Â  Â  Â  Â  penumbra={1}
Â  Â  Â  Â  Â  intensity={50}
Â  Â  Â  Â  Â  castShadow
Â  Â  Â  Â  Â  shadow-mapSize-width={1024}
Â  Â  Â  Â  Â  shadow-mapSize-height={1024}
Â  Â  Â  Â  />
Â  Â  Â  Â  <Environment preset="studio" />
Â  Â  Â  Â  <CameraController />

Â  Â  Â  Â  <group scale={isMobile ? 0.8 : 1}>
Â  Â  Â  Â  Â  <ShoePart url="/models/heel.glb" name="Heel" onPartClick={null} texture={partTextures["Heel"]} />
Â  Â  Â  Â  Â  <ShoePart url="/models/sole.glb" name="Sole" onPartClick={null} texture={partTextures["Sole"]} />

Â  Â  Â  Â  Â  <ShoePart url="/models/vamp_interior.glb" name="Vamp Interior" onPartClick={setSelectedPart} texture={partTextures["Vamp Interior"]} />
Â  Â  Â  Â  Â  <ShoePart url="/models/laces.glb" name="Laces" onPartClick={setSelectedPart} texture={partTextures["Laces"]} />
Â  Â  Â  Â  Â  <ShoePart url="/models/quarter.glb" name="Quarter" onPartClick={setSelectedPart} texture={partTextures["Quarter"]} />
Â  Â  Â  Â  Â  <ShoePart url="/models/toe_vamp.glb" name="Toe Vamp" onPartClick={setSelectedPart} texture={partTextures["Toe Vamp"]} />
Â  Â  Â  Â  Â  <ShoePart url="/models/heel_counter.glb" name="Heel Counter" onPartClick={setSelectedPart} texture={partTextures["Heel Counter"]} />
Â  Â  Â  Â  Â  <ShoePart url="/models/stitches.glb" name="Stitches" onPartClick={setSelectedPart} texture={partTextures["Stitches"]} />
Â  Â  Â  Â  </group>

Â  Â  Â  Â  <OrbitControls
Â  Â  Â  Â  Â  enableZoom={controlsEnabled}
Â  Â  Â  Â  Â  enablePan={false}
Â  Â  Â  Â  Â  enableRotate={!menuToShow}
Â  Â  Â  Â  Â  rotateSpeed={isMobile ? 0.5 : 0.8}
Â  Â  Â  Â  />
Â  Â  Â  </Canvas>

Â  Â  Â  {menuToShow && (
Â  Â  Â  Â  <RadialMenu
Â  Â  Â  Â  Â  options={menuOptions}
Â  Â  Â  Â  Â  onSelect={onSelectAction}
Â  Â  Â  Â  Â  onClose={handleCloseMenu}
Â  Â  Â  Â  Â  title={menuTitle}
Â  Â  Â  Â  Â  isSwatchMenu={menuToShow === "swatch"}
Â  Â  Â  Â  />
Â  Â  Â  )}
Â  Â  </div>
Â  );
}